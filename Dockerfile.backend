# Dockerfile.backend

# Stage 1: Install all monorepo dependencies with network resilience
FROM node:18-alpine AS dependencies
WORKDIR /usr/src/app

# Set npm config to use the official registry and improve network resilience
# This helps with network errors like ECONNRESET
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set fetch-retries 5 && \
    npm config set fetch-timeout 60000

# Copy all package.json files to leverage Docker cache
COPY package.json package-lock.json* ./

# Copy package.json for all workspaces
COPY apps/components/package.json ./apps/components/
COPY apps/stores/package.json ./apps/stores/
COPY apps/web-client/package.json ./apps/web-client/
COPY packages/common/package.json ./packages/common/
COPY services/auth-service/package.json ./services/auth-service/
COPY services/crm-service/package.json ./services/crm-service/
COPY services/sales-service/package.json ./services/sales-service/

# Install all dependencies for the monorepo
RUN npm install --legacy-peer-deps


# Stage 2: Build the specific service
FROM node:18-alpine AS builder
ARG SERVICE_NAME
WORKDIR /usr/src/app

# Copy all source code from the host
COPY . .

# Copy installed node_modules from the 'dependencies' stage
COPY --from=dependencies /usr/src/app/node_modules ./node_modules

# Build the specific service using its workspace script
RUN npm run build --workspace=${SERVICE_NAME}

# Prune development dependencies to create smaller production node_modules
RUN npm prune --production


# Stage 3: Production image - smaller and more secure
FROM node:18-alpine AS runner
WORKDIR /usr/src/app

ARG SERVICE_NAME

# Set environment to production
ENV NODE_ENV=production

# Copy pruned production node_modules from builder stage
COPY --from=builder /usr/src/app/node_modules ./node_modules

# Copy the built application from the builder stage
# The build output for a NestJS workspace is inside the workspace folder
COPY --from=builder /usr/src/app/services/${SERVICE_NAME}/dist ./dist

# Copy the root package.json to resolve modules correctly at runtime
COPY --from=builder /usr/src/app/package.json ./package.json

# Set the default command to run the application
# This will be overridden by the command in docker-compose.yml, but it's good practice.
CMD [ "node", "dist/main" ]
